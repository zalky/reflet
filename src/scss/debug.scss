
@use "sass:color";
@use "sass:math";

@import "config";

$debug-color:                   #454545;

$debug-mark-color:              #7732ff; // #d632ff; // #325bff; // #3733ff; // #8967f4; // #a267f4;
$debug-control-bg:              rgba(248, 250, 255, 96%); // rgba(245, 245, 246, 96%);
$debug-control-bg-hover:        color.adjust($debug-control-bg, $lightness: -1);
$debug-radius:                  8px;
$debug-stack-height:            $debug-radius;
$debug-panel-radius:            0;
$debug-border-thickness:        2px;
$debug-border-color:            color.adjust($debug-color, $lightness: 15);
$debug-panel-border:            $debug-border-thickness solid $debug-border-color;
$debug-panel-inner-border:      1px solid $debug-border-color;
$debug-panel-drop-shadow:       rgba(208, 208, 208, 50%);

$syntax-keyword-namespace:      #9167db; // #6786db
$syntax-keyword-name:           #ac4af0; // #297bf2
$syntax-ref:                    #ff00e9; // #d04dff;
$syntax-string:                 #818181;
$syntax-fsm-state:              #3733ff; // #0c56fc;
$syntax-number:                 #8b8ab8;
$syntax-boolean:                $syntax-number;

$control-fade:                  -0.3;

$coll-brace-width:              0.5rem;


@mixin disable-safari-transitions {
    // Safari implements janky transitions when combined with certain
    // positioning properties.
    @supports selector(:nth-child(1 of x)) {
        transition: none !important;
    }
}

.reflet-debug-overlay {
    all: initial;               // Ignore all host client styles
    display: block;
    margin: 0;
    line-height: 1.5;
    color: $font-color;
    font-family: $font-family-sans-serif;
    font-size: $font-size;
    -webkit-text-size-adjust: 100%;
    -webkit-tap-highlight-color: rgba(82, 82, 82, 0);

    *, *::before, *::after {
            box-sizing: border-box;
    }
}

.reflet-debug-tap {
    display: none;
}

.reflet-node {
    position: fixed;
    visibility: hidden;
    opacity: 0;
    transition: visibility 0.3s ease, opacity 0.3s ease;

    .reflet-marks-on & {
        visibility: visible;
        opacity: 1;
    }
}

.reflet-glyph {
    display: flex;
    align-items: center;
}

.reflet-context {
    display: flex;
    position: absolute;
    padding: 0.5rem 1rem;
    border-radius: 0;
    max-width: 500px;
    width: max-content;

    background: $debug-control-bg;
    box-shadow: 4px 4px $debug-panel-drop-shadow;
    font-size: $font-size-xs;
    font-family: $font-family-monospace;
}

.reflet-global-control {
    display: flex;
    position: fixed;
    bottom: 1rem;
    right: 1rem;
    padding: 0.5rem 1rem;
    border-radius: 0;
    // Global controls always just under marks
    z-index: (1000000000 - 1);

    background: $debug-control-bg;
    font-size: $font-size-sm;
    box-shadow: 4px 4px $debug-panel-drop-shadow;

    user-select: none;
    text-transform: uppercase;
    cursor: pointer;

    visibility: hidden;
    opacity: 0;
    transition: all 0.3s ease;

    .reflet-marks-on & {
        visibility: visible;
        opacity: 1;
    }

    .reflet-control, svg {
        width: 1rem;
    }

    &:hover {
        background: $debug-control-bg-hover;
    }
}

.reflet-mark-list {
    position: absolute;
    display: grid;
    grid-template-columns: auto auto;
    grid-template-rows: 4 * $debug-radius;
    align-items: start;
    border-radius: 0;

    background: $debug-control-bg;
    font-size: $font-size-xs;
    box-shadow: 4px 4px $debug-panel-drop-shadow;

    > div {
        display: contents;
        cursor: pointer;

        > * {
            padding: $debug-radius;
        }

        &:hover > * {
            background: $debug-control-bg-hover;
        }

        > :nth-child(2n+1) {
            color: $debug-mark-color;
            font-weight: 600;
        }

        > :nth-child(2n) {
            cursor: pointer;
            color: $font-color;
            padding-right: 1rem;
        }
    }

    > * {
        white-space: nowrap;
    }
}

.reflet-mark, .reflet-mark-group {
    position: relative;
    transform: translate($debug-radius, $debug-radius);
    user-select: none;
    color: $debug-mark-color;
    transition: color 0.3s ease;

    svg {
        width: 16px;
        margin-bottom: - $debug-stack-height;

        path {
            transition: all 0.3s linear;
            opacity: 1;
            visibility: visible;
            @include disable-safari-transitions;
        }
    }

    .reflet-mark-list {
        margin-left: -$debug-radius;
        margin-top: -$debug-radius;
        transition: all 0.3s linear;
        visibility: hidden;
        opacity: 0;
        @include disable-safari-transitions;

        > div > :nth-child(2n+1) {
            padding-left: 0.5rem;
        }
    }

    &:hover {
        svg path {
            opacity: 0;
            visibility: hidden;
        }

        .reflet-mark-list {
            visibility: visible;
            opacity: 1;
        }
    }
}

.reflet-panel {
    position: fixed;
    width: 18rem;
    min-width: 3rem;
    min-height: 3rem;

    border: $debug-panel-border;
    border-radius: $debug-panel-radius;
    box-shadow: 0 0 80px rgba(0, 0, 0, 0.07);
    transform-style: preserve-3d;
    color: $debug-color;
    font-size: $font-size-xs;
    background: $body-color;

    $shadow-offset: 4px + $debug-border-thickness;

    &-shadow {
        position: absolute;
        width: 100%;
        height: 100%;
        top: $shadow-offset;
        left: $shadow-offset;

        @if $debug-panel-radius == 0 {
            border-radius: 0;
        } @else {
            border-radius: $debug-panel-radius + $shadow-offset / 2;
        }

        background: $debug-panel-drop-shadow;
        transform: translateZ(-1px);
    }

    &-handle {
        position: absolute;
        bottom: 0;
        right: 0;
        width: 16px;
        height: 16px;
        transition: all 0.3s ease;
        opacity: 0;
        color: $debug-border-color;

        &:hover, .reflet-panel:hover.reflet-resize & {
            opacity: 1;
            cursor: nwse-resize;
        }
    }

    &.reflet-resize {
        cursor: nwse-resize;
    }
}

@function bordered-radius($radius) {
    $r: ($radius - $debug-border-thickness);
    @if $r >= 0 {
        @return $r;
    } @else {
        @return 0;
    }
}

.reflet-header {
    display: grid;
    grid-template-columns: 1fr auto 1fr;
    grid-column-gap: 0.5rem;
    position: sticky;
    top: 0;
    left: 0;
    padding: 0.25rem 0.75rem;
    border-top-left-radius: bordered-radius($debug-panel-radius);
    border-top-right-radius: bordered-radius($debug-panel-radius);
    border-bottom: $debug-panel-inner-border;
    background: $body-color;
    z-index: 1;
    cursor: default;
    user-select: none;

    .reflet-move & {
        cursor: grabbing;
    }

    > :first-child:not(.reflet-props-title) {
        display: flex;

        > :nth-child(2) {
            text-transform: uppercase;
        }

        > * {
            white-space: nowrap;
        }
    }
}

.reflet-props-title, .reflet-ref-title {
    display: flex;
    overflow: hidden;
    white-space: nowrap;
    font-weight: $font-weight-bold;
    grid-column: 2 / span 1;

    > :nth-child(n + 2) {
        margin-left: 0.25rem;
        font-weight: $font-weight-normal;
        font-style: italic;
    }
}

.reflet-props-title {
    > :last-child {
        overflow: hidden;
        text-overflow: ellipsis;
        direction: rtl;
    }
}

.reflet-ref-title > .reflet-ref {
    color: $font-color;
}

.reflet-close {
    justify-self: end;
    grid-column: 3 / span 1;
}

.reflet-control, .reflet-close {
    width: 0.5rem;
    transition: all 0.3s ease;
    cursor: pointer;
    color: $debug-border-color;
    flex: 0 0 auto;
    user-select: none;

    &.reflet-glyph:not(:last-child) {
        margin-right: 0.5rem;
    }

    &:hover {
        color: $debug-color;
    }
}

.reflet-refs {
    display: flex;
    flex-direction: column;
}

.reflet-content {
    display: flex;
    flex-direction: column;
    width: 100%;
    height: 100%;
    overflow-y: scroll;

    > *:not(.reflet-header) {
        padding: 0.5rem 0.75rem;
    }

    > :not(:first-child, :nth-child(2)) {
        border-top: $debug-panel-inner-border;
    }
}

// Ref lenses

.reflet-set-lens {
    display: flex;
    justify-content: space-evenly;
    user-select: none;

    > * {
        cursor: pointer;
        font-size: $font-size-xs;
        font-family: $font-family-monospace;
        text-transform: uppercase;
    }
}

.reflet-event-lens, .reflet-query-lens, .reflet-fsm-lens {
    display: grid;
    grid-template-columns: min-content auto;
    column-gap: 0.5rem;

    > div:first-child > .reflet-divider {
        display: none;
    }

    > div {
        display: contents;

        > .reflet-divider {
            grid-column: 1 / span 2;
            border-top: 1px dotted $debug-border-color;
            margin: 0.5rem -0.75rem;
        }

        > :nth-child(n + 3) {
            grid-column: 2;
            overflow: hidden;
        }
    }
}

.reflet-query-lens, .reflet-fsm-lens {
    > div {
        .reflet-query-control {
            display: flex;
            align-items: flex-start;
            grid-column: 1;
            padding-top: 0.25rem;

            .reflet-control:hover path {
                fill: currentColor;
            }

            .reflet-glyph:not(:last-child) {
                margin-right: 0.25rem;
            }

            > :nth-child(2) {
                transform: scaleX(-1);
            }

            .reflet-control-disabled {
                color: $font-color-disabled;
            }
        }
    }

    .reflet-map-data {
        flex: unset;
    }

    svg text {
        font-size: 8px;
    }
}

.reflet-query-lens > div > :not(.reflet-map):last-child > .reflet-coll-data {
    flex-direction: column;
}

.reflet-transition {
    > :first-child {
        display: flex;
        overflow: hidden;
        justify-content: center;
        font-style: italic;

        > :first-child {
            flex: 1 1 0;
        }

        > :nth-child(3) {
            flex: 1 1 0;
            display: flex;
            justify-content: end;
        }

        > :nth-child(2) {
            margin: 0 0.75rem;
        }

        > .reflet-keyword {
            > * {
                color: $syntax-fsm-state;
            }
        }
    }

    > :nth-child(n + 2) {
        display: grid;
        grid-template-columns: fit-content(3rem) auto;
        grid-column-gap: 0.5rem;

        > .reflet-fsm-details-label {
            color: $syntax-string;
        }

        > .reflet-fsm-details ~ .reflet-vec {
            grid-column-start: 2;
        }
    }
}

.reflet-fsm-init-state {
    width: 100%;
    font-family: $font-family-monospace;
    text-transform: uppercase;
    color: $syntax-string;
}

// Data formatting

@mixin truncate {
    display: inline;
    overflow: hidden;
    text-overflow: ellipsis;
    min-width: 0.25rem;
}

@mixin brace {
    &::before, &::after {
        display: flex;
        width: $coll-brace-width;
        flex-shrink: 0;
        font-weight: 700;
        white-space: nowrap;
    }

    &::before {
        justify-content: flex-start;
        align-self: start;
    }

    &::after {
        justify-content: flex-end;
        align-self: end;
    }
}

.reflet-map {
    display: flex;
    font-family: $font-family-monospace;
    transition: opacity 0.3s ease;
    opacity: 1;

    @include brace;

    &.reflet-coll-expand .reflet-map-data {
        opacity: 0.2;
    }
}

.reflet-map-data {
    display: grid;
    grid-template-columns: auto auto;
    column-gap: 0.5rem;
    flex-grow: 1;
    font-family: $font-family-monospace;
    color: $font-color;
    overflow: scroll;
    transition: opacity 0.3s ease;
    opacity: 1;

    .reflet-coll-inline & {
        display: flex;
        flex-grow: 0;
    }

    .reflet-coll-inline ~ .reflet-map > & {
        flex-grow: 0;
    }

    > div {
        display: contents;

        > * {
            display: flex;
            overflow: hidden;
            white-space: nowrap;

            .reflet-coll-inline & {
                flex-shrink: 0;
            }
        }

        > :nth-child(2) {
            justify-content: flex-end;
        }

        > :nth-child(3) {
            grid-column-start: 1;
            grid-column-end: span 2;
        }
    }
}

.reflet-vec, .reflet-set, .reflet-list {
    display: flex;
    font-family: $font-family-monospace;
    overflow: hidden;

    @include brace;

    &.reflet-coll-expand .reflet-coll-data {
        opacity: 0.2;
    }
}

.reflet-coll-data {
    display: flex;
    flex-direction: column;
    overflow: scroll;
    white-space: nowrap;
    transition: opacity 0.3s ease;
    opacity: 1;

    .reflet-coll-inline & {
        flex-direction: row;

        > :nth-child(n + 1):not(:last-child) {
            margin-right: 0.5rem;
        }
    }

    &:not(.reflet-coll-shrink) {
        // Used to generate dynamic flex-shrink properties in CLJS
        // based on the original size of the collection
        // elements. However, in order to do that, we first need to
        // measure the full width of the elements with no shrink.
        flex-shrink: 0;

        * {
            flex-shrink: 0;
        }
    }

    > * {
        display: flex;
        overflow: hidden;
        white-space: nowrap;
    }
}

.reflet-map::before {
    content: "{";
}

.reflet-map::after {
    content: "}";
}

.reflet-vec::before {
    content: "[";
}

.reflet-vec::after {
    content: "]";
}

.reflet-set::before {
    content: "\#{";
    width: $coll-brace-width + 0.35rem;
}

.reflet-set::after {
    content: "}";
}

.reflet-list::before {
    content: "(";
}

.reflet-list::after {
    content: ")";
}

.reflet-coll-expander {
    display: none;
    user-select: none;
    cursor: pointer;
    margin: 0 0.25rem;

    .reflet-coll-inline > & {
        display: flex;
    }

    .reflet-coll-inline .reflet-coll-inline & {
        display: none;
    }

    svg {
        display: flex;
        transition: all 0.3s ease;
        white-space: nowrap;
    }

    .reflet-coll-expand & svg {
        transform: scale(1, -1);
    }

    svg {
        width: 8px;
    }
}

.reflet-ref {
    font-family: $font-family-monospace;
    color: $syntax-ref;
    @include truncate;

    :not(.reflet-ref-title) > & {
        cursor: pointer;
    }
}

.reflet-keyword {
    display: flex;
    overflow: hidden;
    font-family: $font-family-monospace;
    white-space: nowrap;

    > :last-child {
        @include truncate;
        direction: rtl;
    }
}

.reflet-string {
    color: $syntax-string;
    font-family: $font-family-monospace;
    font-style: italic;

    > * {
        @include truncate;
    }
}

.reflet-nil {
    color: $syntax-string;
    font-family: $font-family-monospace;
}

.reflet-no-data {
    display: flex;
    justify-content: center;
    width: 100%;
    text-transform: uppercase;
}

.reflet-number, .reflet-boolean {
    color: $syntax-number;
    font-family: $font-family-monospace;
}

.reflet-html {
    color: $syntax-string;
    font-family: $font-family-monospace;
}

.reflet-function {
    font-family: $font-family-monospace;
}

.reflet-value-default {
    > * {
        @include truncate;
    }
}
